package task

import (
	"context"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"sync"
	"test_task/url_downloader/storage"
	"time"
)

// TaskManager ‚Äî —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ —Å–∫–∫—Ä—è—è—è—è—è
type TaskManager struct {
	taskDir   string
	tasks     map[string]*Task
	mutex     sync.Mutex
	wg        sync.WaitGroup
	ctx       context.Context
	workerNum int
	fm        *storage.FileManager
}

// NewTaskManager —Å–æ–∑–¥–∞—ë—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á
func NewTaskManager(ctx context.Context, taskDir, downloadDir string, workerNum int) *TaskManager {

	fm := storage.NewFileManager(downloadDir)

	if err := os.MkdirAll(taskDir, 0755); err != nil {
		panic(fmt.Sprintf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∑–∞–¥–∞—á: %v", err))
	}

	tm := &TaskManager{
		taskDir:   taskDir,
		tasks:     make(map[string]*Task),
		ctx:       ctx,
		workerNum: workerNum,
		fm:        fm,
	}

	if err := tm.loadTasks(); err != nil {
		panic(fmt.Sprintf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏: %v", err))
	}

	// –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤
	tm.startWorkers()

	return tm
}

func (tm *TaskManager) CreateTask(urls []string) string {
	log.Printf("üîß CreateTask: –ø–æ–ª—É—á–µ–Ω–æ %d URL\n", len(urls)) // ‚¨Ö –î–æ–±–∞–≤—å

	tm.mutex.Lock()
	defer tm.mutex.Unlock()

	id := generateID()

	task := &Task{
		ID:        id,
		URLs:      urls,
		Status:    StatusProcessing,
		Errors:    nil,
		CreatedAt: time.Now(),
		UpdatedAt: time.Now(),
	}

	tm.tasks[id] = task
	log.Printf("–ó–∞–¥–∞—á–∞ %s –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –º–∞–ø—É\n", id) // ‚¨Ö

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º
	if err := task.Save(tm.taskDir); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: %v", err)
	} else {
		log.Printf("–ó–∞–¥–∞—á–∞ %s —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ %s\n", id, tm.taskDir)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
	go tm.startProcessing(task)

	return id
}

// GetTask –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–¥–∞—á—É –ø–æ ID
func (tm *TaskManager) GetTask(id string) (*Task, bool) {
	tm.mutex.Lock()
	defer tm.mutex.Unlock()

	task, exist := tm.tasks[id]
	return task, exist
}

func (tm *TaskManager) loadTasks() error {

	files, err := os.ReadDir(tm.taskDir)
	if err != nil {
		return fmt.Errorf("–ù–µ—É–¥–∞—á–Ω–æ–µ —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –æ—à–∏–±–∫–æ–π: %v", err)
	}

	for _, file := range files {
		if filepath.Ext(file.Name()) == ".json" {
			id := file.Name()[:len(file.Name())-5]
			task, err := LoadTask(tm.taskDir, id)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á–∏ %s: %v", id, err)
				continue
			}
			tm.tasks[id] = task

			// –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –≤ —Ä–∞–±–æ—Ç–µ ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
			if task.Status == StatusProcessing {
				tm.startProcessing(task)
			}
		}
	}

	return nil
}

// GenerateID ‚Äî –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä ID –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏
func generateID() string {
	return fmt.Sprintf("task_%d", time.Now().UnixNano())
}

// startWorkers –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—É–ª –≤–æ—Ä–∫–µ—Ä–æ–≤
func (tm *TaskManager) startWorkers() {
	for i := 0; i < tm.workerNum; i++ {
		tm.wg.Add(1)
		go tm.worker()
	}
}

// worker ‚Äî –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π –∂–¥—ë—Ç –∑–∞–¥–∞—á–∏ (–≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª)
// –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –ø—É—Å—Ç—ã–º ‚Äî —Ä–µ–∞–ª–∏–∑—É–µ–º –≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ —Å `storage`
func (tm *TaskManager) worker() {
	defer tm.wg.Done()

	for {
		select {
		case <-tm.ctx.Done():
			return
		default:
			time.Sleep(100 * time.Millisecond)
		}
	}
}

// startProcessing ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö URL –∏–∑ –∑–∞–¥–∞—á–∏
func (tm *TaskManager) startProcessing(task *Task) {
	tm.wg.Add(1)
	go func() {
		defer tm.wg.Done()

		for _, url := range task.URLs {
			select {
			case <-tm.ctx.Done():
				return
			default:
			}

			filename, err := tm.fm.DownloadFile(tm.ctx, url, task.ID)
			if err != nil {
				task.mutex.Lock()
				task.Errors = append(task.Errors, fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ %s: %v", url, err))
				task.mutex.Unlock()
				continue
			}

			log.Printf("–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: %s –¥–ª—è –∑–∞–¥–∞—á–∏ %s", filename, task.ID)
		}

		task.mutex.Lock()
		task.Status = StatusCompleted
		task.UpdatedAt = time.Now()
		task.Save(tm.taskDir)
		task.mutex.Unlock()
	}()
}
